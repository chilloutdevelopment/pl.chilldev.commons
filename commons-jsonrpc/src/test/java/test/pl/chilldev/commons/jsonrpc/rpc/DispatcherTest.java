/**
 * This file is part of the ChillDev-Commons.
 *
 * @license http://mit-license.org/ The MIT license
 * @copyright 2015 © by Rafał Wrzeszcz - Wrzasq.pl.
 */

package test.pl.chilldev.commons.jsonrpc.rpc;

// JUnit includes
import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;

import com.thetransactioncompany.jsonrpc2.JSONRPC2Error;
import com.thetransactioncompany.jsonrpc2.JSONRPC2Request;
import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;

import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import static org.mockito.Mockito.*;

import pl.chilldev.commons.jsonrpc.daemon.ContextInterface;
import pl.chilldev.commons.jsonrpc.rpc.Dispatcher;
import pl.chilldev.commons.jsonrpc.rpc.ReturningMethod;
import pl.chilldev.commons.jsonrpc.rpc.VoidMethod;

@RunWith(MockitoJUnitRunner.class)
public class DispatcherTest
{
    @Mock
    private Dispatcher.RequestHandler<ContextInterface> handler;

    @Mock
    private ReturningMethod<ContextInterface> returningMethod;

    @Mock
    private VoidMethod<ContextInterface> voidMethod;

    @Mock
    private ContextInterface context;

    @Test
    public void dispatch()
        throws
            JSONRPC2Error
    {
        Dispatcher<ContextInterface> dispatcher = new Dispatcher<>();
        dispatcher.register("version", this.handler);

        // create request
        JSONRPC2Request request = new JSONRPC2Request("version", "test");

        JSONRPC2Response expected = new JSONRPC2Response(request.getID());
        doReturn(expected).when(this.handler).process(same(request), isA(ContextInterface.class));
        JSONRPC2Response response = dispatcher.dispatch(request, this.context);

        assertTrue("Dispatcher should find registered method handler.", response.indicatesSuccess());
        assertSame("Dispatcher should return response generated by method handler.", expected, response);
    }

    @Test
    public void dispatchWithJSONRPC2Error()
        throws
            JSONRPC2Error
    {
        Dispatcher<ContextInterface> dispatcher = new Dispatcher<>();
        dispatcher.register("version", this.handler);

        // create request
        JSONRPC2Request request = new JSONRPC2Request("version", "test");

        JSONRPC2Error error = new JSONRPC2Error(1, "");
        doThrow(error).when(this.handler).process(same(request), isA(ContextInterface.class));
        JSONRPC2Response response = dispatcher.dispatch(request, this.context);

        assertFalse("Dispatcher should return error response if handler throws exception.", response.indicatesSuccess());
        assertSame("Dispatcher should return response with error generated by handler.", error, response.getError());
    }

    @Test
    public void dispatchWithMethodNotFound()
    {
        Dispatcher<ContextInterface> dispatcher = new Dispatcher<>();

        // create request
        JSONRPC2Request request = new JSONRPC2Request("version", "test");
        JSONRPC2Response response = dispatcher.dispatch(request, null);

        assertFalse("Request should not succeed for unregistered method.", response.indicatesSuccess());
        assertEquals("When method handler is not assigned throws error should be METHOD_NOT_FOUND.", JSONRPC2Error.METHOD_NOT_FOUND, response.getError());
        assertEquals("Response should have request's ID.", request.getID(), response.getID());
    }

    @Test
    public void registerReturningMethod()
        throws
            JSONRPC2Error
    {
        Dispatcher<ContextInterface> dispatcher = new Dispatcher<>();
        dispatcher.register("version", this.returningMethod);

        // create request
        JSONRPC2Request request = new JSONRPC2Request("version", "test");

        Object expected = "foo";
        doReturn(expected).when(this.returningMethod).process(same(request), isA(ContextInterface.class));
        JSONRPC2Response response = dispatcher.dispatch(request, this.context);

        assertTrue("Dispatcher should find registered method handler.", response.indicatesSuccess());
        assertSame("Dispatcher should return response with result generated by method handler.", expected, response.getResult());
    }

    @Test
    public void registerVoidMethod()
        throws
            JSONRPC2Error
    {
        Dispatcher<ContextInterface> dispatcher = new Dispatcher<>();
        dispatcher.register("version", this.voidMethod);

        // create request
        JSONRPC2Request request = new JSONRPC2Request("version", "test");

        JSONRPC2Response response = dispatcher.dispatch(request, this.context);

        assertTrue("Dispatcher should find registered method handler.", response.indicatesSuccess());

        verify(this.voidMethod).process(same(request), isA(ContextInterface.class));
    }
}
